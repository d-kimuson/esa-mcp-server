/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * esa API
 * API for esa.io - A documentation sharing service
 * OpenAPI spec version: 1.0.0
 */
export interface Pagination {
  /** @nullable */
  prev_page?: number | null
  /** @nullable */
  next_page?: number | null
  total_count?: number
  page?: number
  per_page?: number
  max_per_page?: number
}

export type TeamPrivacy = (typeof TeamPrivacy)[keyof typeof TeamPrivacy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TeamPrivacy = {
  closed: "closed",
  open: "open",
} as const

export interface Team {
  name?: string
  privacy?: TeamPrivacy
  description?: string
  icon?: string
  url?: string
}

export type MemberRole = (typeof MemberRole)[keyof typeof MemberRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MemberRole = {
  owner: "owner",
  member: "member",
} as const

export interface Member {
  myself?: boolean
  name?: string
  screen_name?: string
  icon?: string
  email?: string
  posts_count?: number
  role?: MemberRole
  joined_at?: string
  last_accessed_at?: string
}

export type PostKind = (typeof PostKind)[keyof typeof PostKind]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostKind = {
  stock: "stock",
  flow: "flow",
} as const

export interface Post {
  number?: number
  name?: string
  full_name?: string
  wip?: boolean
  body_md?: string
  body_html?: string
  created_at?: string
  message?: string
  url?: string
  updated_at?: string
  tags?: string[]
  /** @nullable */
  category?: string | null
  revision_number?: number
  created_by?: User
  updated_by?: User
  kind?: PostKind
  comments_count?: number
  tasks_count?: number
  done_tasks_count?: number
  stargazers_count?: number
  watchers_count?: number
  star?: boolean
  watch?: boolean
}

export interface Comment {
  id?: number
  body_md?: string
  body_html?: string
  created_at?: string
  updated_at?: string
  url?: string
  created_by?: User
  stargazers_count?: number
  star?: boolean
}

export interface User {
  myself?: boolean
  name?: string
  screen_name?: string
  icon?: string
}

export interface ErrorResponseBody {
  message: string
  error: string
}

/**
 * page number
 */
export type PageParameter = number

/**
 * number of items per page
 */
export type PerPageParameter = number

export type PostOauthTokenBodyGrantType =
  (typeof PostOauthTokenBodyGrantType)[keyof typeof PostOauthTokenBodyGrantType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOauthTokenBodyGrantType = {
  authorization_code: "authorization_code",
} as const

export type PostOauthTokenBody = {
  client_id: string
  client_secret: string
  grant_type: PostOauthTokenBodyGrantType
  redirect_uri: string
  code: string
}

export type PostOauthToken200 = {
  access_token?: string
  token_type?: string
  scope?: string
  created_at?: number
}

export type GetOauthTokenInfo200ExpiresIn = number | null

export type GetOauthTokenInfo200Application = {
  uid?: string
}

export type GetOauthTokenInfo200User = {
  id?: number
}

export type GetOauthTokenInfo200 = {
  resource_owner_id?: number
  scope?: string[]
  expires_in?: GetOauthTokenInfo200ExpiresIn
  application?: GetOauthTokenInfo200Application
  created_at?: number
  user?: GetOauthTokenInfo200User
}

export type PostOauthRevokeBody = {
  client_id: string
  client_secret: string
  token: string
}

export type PostOauthRevoke200 = { [key: string]: unknown }

export type GetV1TeamsParams = {
  role?: GetV1TeamsRole
}

export type GetV1TeamsRole =
  (typeof GetV1TeamsRole)[keyof typeof GetV1TeamsRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsRole = {
  member: "member",
  owner: "owner",
} as const

export type GetV1Teams200 = Pagination & {
  teams?: Team[]
}

export type GetV1TeamsTeamNameStats200 = {
  members?: number
  posts?: number
  posts_wip?: number
  posts_shipped?: number
  comments?: number
  stars?: number
  daily_active_users?: number
  weekly_active_users?: number
  monthly_active_users?: number
}

export type GetV1TeamsTeamNamePostsParams = {
  /**
   * Search query
   */
  q?: string
  include?: GetV1TeamsTeamNamePostsInclude
  sort?: GetV1TeamsTeamNamePostsSort
  order?: GetV1TeamsTeamNamePostsOrder
  /**
   * page number
   */
  page?: PageParameter
  /**
   * number of items per page
   */
  per_page?: PerPageParameter
}

export type GetV1TeamsTeamNamePostsInclude =
  (typeof GetV1TeamsTeamNamePostsInclude)[keyof typeof GetV1TeamsTeamNamePostsInclude]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsInclude = {
  comments: "comments",
  stargazers: "stargazers",
  "comments,stargazers": "comments,stargazers",
  "comments,commentsstargazers": "comments,comments.stargazers",
} as const

export type GetV1TeamsTeamNamePostsSort =
  (typeof GetV1TeamsTeamNamePostsSort)[keyof typeof GetV1TeamsTeamNamePostsSort]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsSort = {
  updated: "updated",
  created: "created",
  number: "number",
  stars: "stars",
  watches: "watches",
  comments: "comments",
  best_match: "best_match",
} as const

export type GetV1TeamsTeamNamePostsOrder =
  (typeof GetV1TeamsTeamNamePostsOrder)[keyof typeof GetV1TeamsTeamNamePostsOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsOrder = {
  asc: "asc",
  desc: "desc",
} as const

export type GetV1TeamsTeamNamePosts200 = Pagination & {
  posts?: Post[]
}

export type PostV1TeamsTeamNamePostsBodyPost = {
  name: string
  body_md?: string
  tags?: string[]
  category?: string
  wip?: boolean
  message?: string
  user?: string
  template_post_id?: number
}

export type PostV1TeamsTeamNamePostsBody = {
  post?: PostV1TeamsTeamNamePostsBodyPost
}

export type GetV1TeamsTeamNamePostsPostNumberParams = {
  include?: GetV1TeamsTeamNamePostsPostNumberInclude
}

export type GetV1TeamsTeamNamePostsPostNumberInclude =
  (typeof GetV1TeamsTeamNamePostsPostNumberInclude)[keyof typeof GetV1TeamsTeamNamePostsPostNumberInclude]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNamePostsPostNumberInclude = {
  comments: "comments",
  "comments,commentsstargazers": "comments,comments.stargazers",
  stargazers: "stargazers",
} as const

export type PatchV1TeamsTeamNamePostsPostNumberBodyPostOriginalRevision = {
  body_md?: string
  number?: number
  user?: string
}

export type PatchV1TeamsTeamNamePostsPostNumberBodyPost = {
  name?: string
  body_md?: string
  tags?: string[]
  category?: string
  wip?: boolean
  message?: string
  created_by?: string
  updated_by?: string
  original_revision?: PatchV1TeamsTeamNamePostsPostNumberBodyPostOriginalRevision
}

export type PatchV1TeamsTeamNamePostsPostNumberBody = {
  post?: PatchV1TeamsTeamNamePostsPostNumberBodyPost
}

export type PatchV1TeamsTeamNamePostsPostNumber200AllOf = {
  overlapped?: boolean
}

export type PatchV1TeamsTeamNamePostsPostNumber200 = Post &
  PatchV1TeamsTeamNamePostsPostNumber200AllOf

export type GetV1TeamsTeamNamePostsPostNumberComments200 = Pagination & {
  comments?: Comment[]
}

export type PostV1TeamsTeamNamePostsPostNumberCommentsBodyComment = {
  body_md: string
  user?: string
}

export type PostV1TeamsTeamNamePostsPostNumberCommentsBody = {
  comment?: PostV1TeamsTeamNamePostsPostNumberCommentsBodyComment
}

export type GetV1TeamsTeamNameCommentsCommentIdParams = {
  include?: GetV1TeamsTeamNameCommentsCommentIdInclude
}

export type GetV1TeamsTeamNameCommentsCommentIdInclude =
  (typeof GetV1TeamsTeamNameCommentsCommentIdInclude)[keyof typeof GetV1TeamsTeamNameCommentsCommentIdInclude]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNameCommentsCommentIdInclude = {
  stargazers: "stargazers",
} as const

export type PatchV1TeamsTeamNameCommentsCommentIdBodyComment = {
  body_md?: string
  user?: string
}

export type PatchV1TeamsTeamNameCommentsCommentIdBody = {
  comment?: PatchV1TeamsTeamNameCommentsCommentIdBodyComment
}

export type GetV1TeamsTeamNameComments200 = Pagination & {
  comments?: Comment[]
}

export type GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItemBody =
  | string
  | null

export type GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItem = {
  created_at?: string
  body?: GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItemBody
  user?: User
}

export type GetV1TeamsTeamNamePostsPostNumberStargazers200 = Pagination & {
  stargazers?: GetV1TeamsTeamNamePostsPostNumberStargazers200StargazersItem[]
}

export type PostV1TeamsTeamNamePostsPostNumberStarBody = {
  body?: string
}

export type GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItemBody =
  string | null

export type GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItem = {
  created_at?: string
  body?: GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItemBody
  user?: User
}

export type GetV1TeamsTeamNameCommentsCommentIdStargazers200 = Pagination & {
  stargazers?: GetV1TeamsTeamNameCommentsCommentIdStargazers200StargazersItem[]
}

export type PostV1TeamsTeamNameCommentsCommentIdStarBody = {
  body?: string
}

export type GetV1TeamsTeamNamePostsPostNumberWatchers200WatchersItem = {
  created_at?: string
  user?: User
}

export type GetV1TeamsTeamNamePostsPostNumberWatchers200 = Pagination & {
  watchers?: GetV1TeamsTeamNamePostsPostNumberWatchers200WatchersItem[]
}

export type PostV1TeamsTeamNameCategoriesBatchMoveBody = {
  /** Source category path */
  from: string
  /** Destination category path */
  to: string
}

export type PostV1TeamsTeamNameCategoriesBatchMove200 = {
  /** Number of moved categories including subcategories */
  count?: number
  from?: string
  to?: string
}

export type GetV1TeamsTeamNameTags200TagsItem = {
  name?: string
  posts_count?: number
}

export type GetV1TeamsTeamNameTags200 = Pagination & {
  tags?: GetV1TeamsTeamNameTags200TagsItem[]
}

export type GetV1TeamsTeamNameInvitation200 = {
  url?: string
}

export type PostV1TeamsTeamNameInvitationRegenerator200 = {
  url?: string
}

export type GetV1TeamsTeamNameInvitations200InvitationsItem = {
  email?: string
  code?: string
  expires_at?: string
  url?: string
}

export type GetV1TeamsTeamNameInvitations200 = Pagination & {
  invitations?: GetV1TeamsTeamNameInvitations200InvitationsItem[]
}

export type PostV1TeamsTeamNameInvitationsBodyMember = {
  /** @maxItems 100 */
  emails: string[]
}

export type PostV1TeamsTeamNameInvitationsBody = {
  member: PostV1TeamsTeamNameInvitationsBodyMember
}

export type PostV1TeamsTeamNameInvitations201InvitationsItem = {
  email?: string
  code?: string
  expires_at?: string
  url?: string
}

export type PostV1TeamsTeamNameInvitations201 = {
  invitations?: PostV1TeamsTeamNameInvitations201InvitationsItem[]
}

export type GetV1TeamsTeamNameEmojisParams = {
  include?: GetV1TeamsTeamNameEmojisInclude
}

export type GetV1TeamsTeamNameEmojisInclude =
  (typeof GetV1TeamsTeamNameEmojisInclude)[keyof typeof GetV1TeamsTeamNameEmojisInclude]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1TeamsTeamNameEmojisInclude = {
  all: "all",
} as const

export type GetV1TeamsTeamNameEmojis200EmojisItemRaw = string | null

export type GetV1TeamsTeamNameEmojis200EmojisItem = {
  code?: string
  aliases?: string[]
  category?: string
  raw?: GetV1TeamsTeamNameEmojis200EmojisItemRaw
  url?: string
}

export type GetV1TeamsTeamNameEmojis200 = {
  emojis?: GetV1TeamsTeamNameEmojis200EmojisItem[]
}

export type PostV1TeamsTeamNameEmojisBodyOneEmoji = {
  code: string
  origin_code?: string
  image?: string
}

export type PostV1TeamsTeamNameEmojisBodyOne = {
  emoji: PostV1TeamsTeamNameEmojisBodyOneEmoji
}

export type PostV1TeamsTeamNameEmojisBodyTwo = {
  "emoji[code]"?: string
  "emoji[image]"?: Blob
}

export type PostV1TeamsTeamNameEmojis201 = {
  code?: string
}

export type GetV1UserParams = {
  include?: GetV1UserInclude
}

export type GetV1UserInclude =
  (typeof GetV1UserInclude)[keyof typeof GetV1UserInclude]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetV1UserInclude = {
  teams: "teams",
} as const

export type GetV1User200 = {
  id?: number
  name?: string
  screen_name?: string
  created_at?: string
  updated_at?: string
  icon?: string
  email?: string
}
