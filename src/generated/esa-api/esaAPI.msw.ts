/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * esa API
 * API for esa.io - A documentation sharing service
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"

import type {
  Comment,
  GetOauthTokenInfo200,
  GetV1Teams200,
  GetV1TeamsTeamNameComments200,
  GetV1TeamsTeamNameCommentsCommentIdStargazers200,
  GetV1TeamsTeamNameEmojis200,
  GetV1TeamsTeamNameInvitation200,
  GetV1TeamsTeamNameInvitations200,
  GetV1TeamsTeamNamePosts200,
  GetV1TeamsTeamNamePostsPostNumberComments200,
  GetV1TeamsTeamNamePostsPostNumberStargazers200,
  GetV1TeamsTeamNamePostsPostNumberWatchers200,
  GetV1TeamsTeamNameStats200,
  GetV1TeamsTeamNameTags200,
  GetV1User200,
  PatchV1TeamsTeamNamePostsPostNumber200,
  Post,
  PostOauthRevoke200,
  PostOauthToken200,
  PostV1TeamsTeamNameCategoriesBatchMove200,
  PostV1TeamsTeamNameEmojis201,
  PostV1TeamsTeamNameInvitationRegenerator200,
  PostV1TeamsTeamNameInvitations201,
  Team,
} from "./esaAPI.schemas"

export const getPostOauthTokenResponseMock = (
  overrideResponse: Partial<PostOauthToken200> = {}
): PostOauthToken200 => ({
  access_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  token_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  scope: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  created_at: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetOauthTokenInfoResponseMock = (
  overrideResponse: Partial<GetOauthTokenInfo200> = {}
): GetOauthTokenInfo200 => ({
  resource_owner_id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  scope: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.string.alpha(20)),
    undefined,
  ]),
  expires_in: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  application: faker.helpers.arrayElement([
    { uid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) },
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  user: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
})

export const getPostOauthRevokeResponseMock = (): PostOauthRevoke200 => ({})

export const getGetV1TeamsResponseMock = (): GetV1Teams200 => ({
  ...{
    ...{
      prev_page: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      next_page: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      total_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      per_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      max_per_page: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
    },
  },
  teams: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      privacy: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["closed", "open"] as const),
        undefined,
      ]),
      description: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
      url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    })),
    undefined,
  ]),
})

export const getGetV1TeamsTeamNameResponseMock = (
  overrideResponse: Partial<Team> = {}
): Team => ({
  name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  privacy: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["closed", "open"] as const),
    undefined,
  ]),
  description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNameStatsResponseMock = (
  overrideResponse: Partial<GetV1TeamsTeamNameStats200> = {}
): GetV1TeamsTeamNameStats200 => ({
  members: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  posts: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  posts_wip: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  posts_shipped: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  comments: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stars: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  daily_active_users: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  weekly_active_users: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  monthly_active_users: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNamePostsResponseMock =
  (): GetV1TeamsTeamNamePosts200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    posts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        number: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        full_name: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        wip: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
        body_md: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        body_html: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        created_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        message: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
        updated_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        tags: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.string.alpha(20)),
          undefined,
        ]),
        category: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        revision_number: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        created_by: faker.helpers.arrayElement([
          {
            myself: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            screen_name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
          },
          undefined,
        ]),
        updated_by: faker.helpers.arrayElement([
          {
            myself: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            screen_name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
          },
          undefined,
        ]),
        kind: faker.helpers.arrayElement([
          faker.helpers.arrayElement(["stock", "flow"] as const),
          undefined,
        ]),
        comments_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        tasks_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        done_tasks_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        stargazers_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        watchers_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
        watch: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
      })),
      undefined,
    ]),
  })

export const getPostV1TeamsTeamNamePostsResponseMock = (
  overrideResponse: Partial<Post> = {}
): Post => ({
  number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  full_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  wip: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  body_md: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  body_html: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.string.alpha(20)),
    undefined,
  ]),
  category: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  revision_number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  created_by: faker.helpers.arrayElement([
    {
      myself: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      screen_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    },
    undefined,
  ]),
  updated_by: faker.helpers.arrayElement([
    {
      myself: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      screen_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    },
    undefined,
  ]),
  kind: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["stock", "flow"] as const),
    undefined,
  ]),
  comments_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  tasks_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  done_tasks_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stargazers_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  watchers_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  watch: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNamePostsPostNumberResponseMock = (
  overrideResponse: Partial<Post> = {}
): Post => ({
  number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  full_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  wip: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  body_md: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  body_html: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.string.alpha(20)),
    undefined,
  ]),
  category: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  revision_number: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  created_by: faker.helpers.arrayElement([
    {
      myself: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      screen_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    },
    undefined,
  ]),
  updated_by: faker.helpers.arrayElement([
    {
      myself: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      screen_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    },
    undefined,
  ]),
  kind: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["stock", "flow"] as const),
    undefined,
  ]),
  comments_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  tasks_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  done_tasks_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stargazers_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  watchers_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  watch: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
})

export const getPatchV1TeamsTeamNamePostsPostNumberResponseMock =
  (): PatchV1TeamsTeamNamePostsPostNumber200 => ({
    ...{
      number: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      full_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      wip: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      body_md: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      body_html: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      tags: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.string.alpha(20)),
        undefined,
      ]),
      category: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      revision_number: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      created_by: faker.helpers.arrayElement([
        {
          myself: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
          screen_name: faker.helpers.arrayElement([
            faker.string.alpha(20),
            undefined,
          ]),
          icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
        },
        undefined,
      ]),
      updated_by: faker.helpers.arrayElement([
        {
          myself: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
          screen_name: faker.helpers.arrayElement([
            faker.string.alpha(20),
            undefined,
          ]),
          icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
        },
        undefined,
      ]),
      kind: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["stock", "flow"] as const),
        undefined,
      ]),
      comments_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      tasks_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      done_tasks_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      stargazers_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      watchers_count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      watch: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    },
    ...{
      overlapped: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
  })

export const getGetV1TeamsTeamNamePostsPostNumberCommentsResponseMock =
  (): GetV1TeamsTeamNamePostsPostNumberComments200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    comments: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        body_md: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        body_html: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        created_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        updated_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
        created_by: faker.helpers.arrayElement([
          {
            myself: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            screen_name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
          },
          undefined,
        ]),
        stargazers_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      })),
      undefined,
    ]),
  })

export const getPostV1TeamsTeamNamePostsPostNumberCommentsResponseMock = (
  overrideResponse: Partial<Comment> = {}
): Comment => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  body_md: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  body_html: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  created_by: faker.helpers.arrayElement([
    {
      myself: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      screen_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    },
    undefined,
  ]),
  stargazers_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNameCommentsCommentIdResponseMock = (
  overrideResponse: Partial<Comment> = {}
): Comment => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  body_md: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  body_html: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  created_by: faker.helpers.arrayElement([
    {
      myself: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      screen_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    },
    undefined,
  ]),
  stargazers_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
})

export const getPatchV1TeamsTeamNameCommentsCommentIdResponseMock = (
  overrideResponse: Partial<Comment> = {}
): Comment => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  body_md: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  body_html: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  created_by: faker.helpers.arrayElement([
    {
      myself: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      screen_name: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
      icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    },
    undefined,
  ]),
  stargazers_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNameCommentsResponseMock =
  (): GetV1TeamsTeamNameComments200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    comments: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        body_md: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        body_html: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        created_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        updated_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
        created_by: faker.helpers.arrayElement([
          {
            myself: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            screen_name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
          },
          undefined,
        ]),
        stargazers_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        star: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      })),
      undefined,
    ]),
  })

export const getGetV1TeamsTeamNamePostsPostNumberStargazersResponseMock =
  (): GetV1TeamsTeamNamePostsPostNumberStargazers200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    stargazers: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        created_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        body: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        user: faker.helpers.arrayElement([
          {
            myself: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            screen_name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
  })

export const getGetV1TeamsTeamNameCommentsCommentIdStargazersResponseMock =
  (): GetV1TeamsTeamNameCommentsCommentIdStargazers200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    stargazers: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        created_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        body: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        user: faker.helpers.arrayElement([
          {
            myself: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            screen_name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
  })

export const getGetV1TeamsTeamNamePostsPostNumberWatchersResponseMock =
  (): GetV1TeamsTeamNamePostsPostNumberWatchers200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    watchers: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        created_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        user: faker.helpers.arrayElement([
          {
            myself: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            screen_name: faker.helpers.arrayElement([
              faker.string.alpha(20),
              undefined,
            ]),
            icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
          },
          undefined,
        ]),
      })),
      undefined,
    ]),
  })

export const getPostV1TeamsTeamNameCategoriesBatchMoveResponseMock = (
  overrideResponse: Partial<PostV1TeamsTeamNameCategoriesBatchMove200> = {}
): PostV1TeamsTeamNameCategoriesBatchMove200 => ({
  count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  from: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  to: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNameTagsResponseMock =
  (): GetV1TeamsTeamNameTags200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    tags: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        posts_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      })),
      undefined,
    ]),
  })

export const getGetV1TeamsTeamNameInvitationResponseMock = (
  overrideResponse: Partial<GetV1TeamsTeamNameInvitation200> = {}
): GetV1TeamsTeamNameInvitation200 => ({
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  ...overrideResponse,
})

export const getPostV1TeamsTeamNameInvitationRegeneratorResponseMock = (
  overrideResponse: Partial<PostV1TeamsTeamNameInvitationRegenerator200> = {}
): PostV1TeamsTeamNameInvitationRegenerator200 => ({
  url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNameInvitationsResponseMock =
  (): GetV1TeamsTeamNameInvitations200 => ({
    ...{
      ...{
        prev_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        next_page: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        total_count: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_per_page: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    },
    invitations: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
        code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        expires_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          undefined,
        ]),
        url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
      })),
      undefined,
    ]),
  })

export const getPostV1TeamsTeamNameInvitationsResponseMock = (
  overrideResponse: Partial<PostV1TeamsTeamNameInvitations201> = {}
): PostV1TeamsTeamNameInvitations201 => ({
  invitations: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
      code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      expires_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    })),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetV1TeamsTeamNameEmojisResponseMock = (
  overrideResponse: Partial<GetV1TeamsTeamNameEmojis200> = {}
): GetV1TeamsTeamNameEmojis200 => ({
  emojis: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      aliases: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.string.alpha(20)),
        undefined,
      ]),
      category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      raw: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      url: faker.helpers.arrayElement([faker.internet.url(), undefined]),
    })),
    undefined,
  ]),
  ...overrideResponse,
})

export const getPostV1TeamsTeamNameEmojisResponseMock = (
  overrideResponse: Partial<PostV1TeamsTeamNameEmojis201> = {}
): PostV1TeamsTeamNameEmojis201 => ({
  code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ...overrideResponse,
})

export const getGetV1UserResponseMock = (
  overrideResponse: Partial<GetV1User200> = {}
): GetV1User200 => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  screen_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  icon: faker.helpers.arrayElement([faker.internet.url(), undefined]),
  email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
  ...overrideResponse,
})

export const getPostOauthTokenMockHandler = (
  overrideResponse?:
    | PostOauthToken200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<PostOauthToken200> | PostOauthToken200)
) => {
  return http.post("*/oauth/token", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostOauthTokenResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetOauthTokenInfoMockHandler = (
  overrideResponse?:
    | GetOauthTokenInfo200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetOauthTokenInfo200> | GetOauthTokenInfo200)
) => {
  return http.get("*/oauth/token/info", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetOauthTokenInfoResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPostOauthRevokeMockHandler = (
  overrideResponse?:
    | PostOauthRevoke200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<PostOauthRevoke200> | PostOauthRevoke200)
) => {
  return http.post("*/oauth/revoke", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostOauthRevokeResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetV1TeamsMockHandler = (
  overrideResponse?:
    | GetV1Teams200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetV1Teams200> | GetV1Teams200)
) => {
  return http.get("*/v1/teams", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetV1TeamsTeamNameMockHandler = (
  overrideResponse?:
    | Team
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Team> | Team)
) => {
  return http.get("*/v1/teams/:teamName", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetV1TeamsTeamNameStatsMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNameStats200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetV1TeamsTeamNameStats200> | GetV1TeamsTeamNameStats200)
) => {
  return http.get("*/v1/teams/:teamName/stats", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameStatsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetV1TeamsTeamNamePostsMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNamePosts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetV1TeamsTeamNamePosts200> | GetV1TeamsTeamNamePosts200)
) => {
  return http.get("*/v1/teams/:teamName/posts", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNamePostsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPostV1TeamsTeamNamePostsMockHandler = (
  overrideResponse?:
    | Post
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<Post> | Post)
) => {
  return http.post("*/v1/teams/:teamName/posts", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1TeamsTeamNamePostsResponseMock()
      ),
      { status: 201, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetV1TeamsTeamNamePostsPostNumberMockHandler = (
  overrideResponse?:
    | Post
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Post> | Post)
) => {
  return http.get("*/v1/teams/:teamName/posts/:postNumber", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNamePostsPostNumberResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPatchV1TeamsTeamNamePostsPostNumberMockHandler = (
  overrideResponse?:
    | PatchV1TeamsTeamNamePostsPostNumber200
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) =>
        | Promise<PatchV1TeamsTeamNamePostsPostNumber200>
        | PatchV1TeamsTeamNamePostsPostNumber200)
) => {
  return http.patch("*/v1/teams/:teamName/posts/:postNumber", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchV1TeamsTeamNamePostsPostNumberResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getDeleteV1TeamsTeamNamePostsPostNumberMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete("*/v1/teams/:teamName/posts/:postNumber", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 204 })
  })
}

export const getGetV1TeamsTeamNamePostsPostNumberCommentsMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNamePostsPostNumberComments200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<GetV1TeamsTeamNamePostsPostNumberComments200>
        | GetV1TeamsTeamNamePostsPostNumberComments200)
) => {
  return http.get(
    "*/v1/teams/:teamName/posts/:postNumber/comments",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1TeamsTeamNamePostsPostNumberCommentsResponseMock()
        ),
        { status: 200, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getPostV1TeamsTeamNamePostsPostNumberCommentsMockHandler = (
  overrideResponse?:
    | Comment
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<Comment> | Comment)
) => {
  return http.post(
    "*/v1/teams/:teamName/posts/:postNumber/comments",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1TeamsTeamNamePostsPostNumberCommentsResponseMock()
        ),
        { status: 201, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getGetV1TeamsTeamNameCommentsCommentIdMockHandler = (
  overrideResponse?:
    | Comment
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Comment> | Comment)
) => {
  return http.get("*/v1/teams/:teamName/comments/:commentId", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameCommentsCommentIdResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPatchV1TeamsTeamNameCommentsCommentIdMockHandler = (
  overrideResponse?:
    | Comment
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<Comment> | Comment)
) => {
  return http.patch(
    "*/v1/teams/:teamName/comments/:commentId",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPatchV1TeamsTeamNameCommentsCommentIdResponseMock()
        ),
        { status: 200, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getDeleteV1TeamsTeamNameCommentsCommentIdMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete(
    "*/v1/teams/:teamName/comments/:commentId",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    }
  )
}

export const getGetV1TeamsTeamNameCommentsMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNameComments200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<GetV1TeamsTeamNameComments200>
        | GetV1TeamsTeamNameComments200)
) => {
  return http.get("*/v1/teams/:teamName/comments", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameCommentsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetV1TeamsTeamNamePostsPostNumberStargazersMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNamePostsPostNumberStargazers200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<GetV1TeamsTeamNamePostsPostNumberStargazers200>
        | GetV1TeamsTeamNamePostsPostNumberStargazers200)
) => {
  return http.get(
    "*/v1/teams/:teamName/posts/:postNumber/stargazers",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1TeamsTeamNamePostsPostNumberStargazersResponseMock()
        ),
        { status: 200, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getPostV1TeamsTeamNamePostsPostNumberStarMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.post(
    "*/v1/teams/:teamName/posts/:postNumber/star",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    }
  )
}

export const getDeleteV1TeamsTeamNamePostsPostNumberStarMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete(
    "*/v1/teams/:teamName/posts/:postNumber/star",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    }
  )
}

export const getGetV1TeamsTeamNameCommentsCommentIdStargazersMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNameCommentsCommentIdStargazers200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<GetV1TeamsTeamNameCommentsCommentIdStargazers200>
        | GetV1TeamsTeamNameCommentsCommentIdStargazers200)
) => {
  return http.get(
    "*/v1/teams/:teamName/comments/:commentId/stargazers",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1TeamsTeamNameCommentsCommentIdStargazersResponseMock()
        ),
        { status: 200, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getPostV1TeamsTeamNameCommentsCommentIdStarMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.post(
    "*/v1/teams/:teamName/comments/:commentId/star",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    }
  )
}

export const getDeleteV1TeamsTeamNameCommentsCommentIdStarMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete(
    "*/v1/teams/:teamName/comments/:commentId/star",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    }
  )
}

export const getGetV1TeamsTeamNamePostsPostNumberWatchersMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNamePostsPostNumberWatchers200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<GetV1TeamsTeamNamePostsPostNumberWatchers200>
        | GetV1TeamsTeamNamePostsPostNumberWatchers200)
) => {
  return http.get(
    "*/v1/teams/:teamName/posts/:postNumber/watchers",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1TeamsTeamNamePostsPostNumberWatchersResponseMock()
        ),
        { status: 200, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getPostV1TeamsTeamNamePostsPostNumberWatchMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.post(
    "*/v1/teams/:teamName/posts/:postNumber/watch",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    }
  )
}

export const getDeleteV1TeamsTeamNamePostsPostNumberWatchMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete(
    "*/v1/teams/:teamName/posts/:postNumber/watch",
    async (info) => {
      await delay(1000)
      if (typeof overrideResponse === "function") {
        await overrideResponse(info)
      }
      return new HttpResponse(null, { status: 204 })
    }
  )
}

export const getPostV1TeamsTeamNameCategoriesBatchMoveMockHandler = (
  overrideResponse?:
    | PostV1TeamsTeamNameCategoriesBatchMove200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) =>
        | Promise<PostV1TeamsTeamNameCategoriesBatchMove200>
        | PostV1TeamsTeamNameCategoriesBatchMove200)
) => {
  return http.post(
    "*/v1/teams/:teamName/categories/batch_move",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1TeamsTeamNameCategoriesBatchMoveResponseMock()
        ),
        { status: 200, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getGetV1TeamsTeamNameTagsMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNameTags200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetV1TeamsTeamNameTags200> | GetV1TeamsTeamNameTags200)
) => {
  return http.get("*/v1/teams/:teamName/tags", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameTagsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetV1TeamsTeamNameInvitationMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNameInvitation200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<GetV1TeamsTeamNameInvitation200>
        | GetV1TeamsTeamNameInvitation200)
) => {
  return http.get("*/v1/teams/:teamName/invitation", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameInvitationResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPostV1TeamsTeamNameInvitationRegeneratorMockHandler = (
  overrideResponse?:
    | PostV1TeamsTeamNameInvitationRegenerator200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) =>
        | Promise<PostV1TeamsTeamNameInvitationRegenerator200>
        | PostV1TeamsTeamNameInvitationRegenerator200)
) => {
  return http.post(
    "*/v1/teams/:teamName/invitation_regenerator",
    async (info) => {
      await delay(1000)

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1TeamsTeamNameInvitationRegeneratorResponseMock()
        ),
        { status: 200, headers: { "Content-Type": "application/json" } }
      )
    }
  )
}

export const getGetV1TeamsTeamNameInvitationsMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNameInvitations200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) =>
        | Promise<GetV1TeamsTeamNameInvitations200>
        | GetV1TeamsTeamNameInvitations200)
) => {
  return http.get("*/v1/teams/:teamName/invitations", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameInvitationsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPostV1TeamsTeamNameInvitationsMockHandler = (
  overrideResponse?:
    | PostV1TeamsTeamNameInvitations201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) =>
        | Promise<PostV1TeamsTeamNameInvitations201>
        | PostV1TeamsTeamNameInvitations201)
) => {
  return http.post("*/v1/teams/:teamName/invitations", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1TeamsTeamNameInvitationsResponseMock()
      ),
      { status: 201, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getDeleteV1TeamsTeamNameInvitationsCodeMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete("*/v1/teams/:teamName/invitations/:code", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 204 })
  })
}

export const getGetV1TeamsTeamNameEmojisMockHandler = (
  overrideResponse?:
    | GetV1TeamsTeamNameEmojis200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetV1TeamsTeamNameEmojis200> | GetV1TeamsTeamNameEmojis200)
) => {
  return http.get("*/v1/teams/:teamName/emojis", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1TeamsTeamNameEmojisResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPostV1TeamsTeamNameEmojisMockHandler = (
  overrideResponse?:
    | PostV1TeamsTeamNameEmojis201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<PostV1TeamsTeamNameEmojis201> | PostV1TeamsTeamNameEmojis201)
) => {
  return http.post("*/v1/teams/:teamName/emojis", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1TeamsTeamNameEmojisResponseMock()
      ),
      { status: 201, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getDeleteV1TeamsTeamNameEmojisCodeMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<void> | void)
) => {
  return http.delete("*/v1/teams/:teamName/emojis/:code", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 204 })
  })
}

export const getGetV1UserMockHandler = (
  overrideResponse?:
    | GetV1User200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetV1User200> | GetV1User200)
) => {
  return http.get("*/v1/user", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1UserResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}
export const getEsaAPIMock = () => [
  getPostOauthTokenMockHandler(),
  getGetOauthTokenInfoMockHandler(),
  getPostOauthRevokeMockHandler(),
  getGetV1TeamsMockHandler(),
  getGetV1TeamsTeamNameMockHandler(),
  getGetV1TeamsTeamNameStatsMockHandler(),
  getGetV1TeamsTeamNamePostsMockHandler(),
  getPostV1TeamsTeamNamePostsMockHandler(),
  getGetV1TeamsTeamNamePostsPostNumberMockHandler(),
  getPatchV1TeamsTeamNamePostsPostNumberMockHandler(),
  getDeleteV1TeamsTeamNamePostsPostNumberMockHandler(),
  getGetV1TeamsTeamNamePostsPostNumberCommentsMockHandler(),
  getPostV1TeamsTeamNamePostsPostNumberCommentsMockHandler(),
  getGetV1TeamsTeamNameCommentsCommentIdMockHandler(),
  getPatchV1TeamsTeamNameCommentsCommentIdMockHandler(),
  getDeleteV1TeamsTeamNameCommentsCommentIdMockHandler(),
  getGetV1TeamsTeamNameCommentsMockHandler(),
  getGetV1TeamsTeamNamePostsPostNumberStargazersMockHandler(),
  getPostV1TeamsTeamNamePostsPostNumberStarMockHandler(),
  getDeleteV1TeamsTeamNamePostsPostNumberStarMockHandler(),
  getGetV1TeamsTeamNameCommentsCommentIdStargazersMockHandler(),
  getPostV1TeamsTeamNameCommentsCommentIdStarMockHandler(),
  getDeleteV1TeamsTeamNameCommentsCommentIdStarMockHandler(),
  getGetV1TeamsTeamNamePostsPostNumberWatchersMockHandler(),
  getPostV1TeamsTeamNamePostsPostNumberWatchMockHandler(),
  getDeleteV1TeamsTeamNamePostsPostNumberWatchMockHandler(),
  getPostV1TeamsTeamNameCategoriesBatchMoveMockHandler(),
  getGetV1TeamsTeamNameTagsMockHandler(),
  getGetV1TeamsTeamNameInvitationMockHandler(),
  getPostV1TeamsTeamNameInvitationRegeneratorMockHandler(),
  getGetV1TeamsTeamNameInvitationsMockHandler(),
  getPostV1TeamsTeamNameInvitationsMockHandler(),
  getDeleteV1TeamsTeamNameInvitationsCodeMockHandler(),
  getGetV1TeamsTeamNameEmojisMockHandler(),
  getPostV1TeamsTeamNameEmojisMockHandler(),
  getDeleteV1TeamsTeamNameEmojisCodeMockHandler(),
  getGetV1UserMockHandler(),
]
